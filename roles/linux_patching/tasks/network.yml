---
- name: Linux Patching | Network | Checking Prerequisite | Include Common Checks
  ansible.builtin.include_tasks: prerequisite.yml

- name: Linux Patching | Network | CA Certificate
  when: rv_linux_patching_root_ca_pem_content is defined and rv_linux_patching_root_ca_pem_content | length > 1
  block:
    - name: Linux Patching | Network | CA Certificate | Make sure the CA certificate folder exists
      ansible.builtin.file:
        path: /usr/local/share/ca-certificates
        state: directory
        mode: "0775"

    - name: Linux Patching | Network | CA Certificate | Copy the certificate
      ansible.builtin.copy:
        content: "{{ rv_linux_patching_root_ca_pem_content }}"
        dest: /usr/local/share/ca-certificates/arpanrec-root-ca.crt
        mode: "0775"

    - name: Linux Patching | Network | CA Certificate | Update CA Trust
      ansible.builtin.command: update-ca-certificates
      register: rv_linux_patching_update_ca_trust_shell_result
      environment:
        PATH: /usr/sbin:{{ ansible_env.PATH }}
      changed_when: rv_linux_patching_update_ca_trust_shell_result.stdout_lines[1] is not match("0 added.*")

    - name: Linux Patching | Network | CA Certificate | Update CA Trust Shell Result
      ansible.builtin.debug:
        var: rv_linux_patching_update_ca_trust_shell_result

- name: Linux Patching | Network | Disable Wifi MAC randomization
  community.general.ini_file:
    path: /etc/NetworkManager/NetworkManager.conf
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    no_extra_spaces: true
    mode: "0775"
  with_items:
    - section: "device"
      option: "wifi.scan-rand-mac-address"
      value: "no"
    - section: "device-mac-randomization"
      option: "wifi.scan-rand-mac-address"
      value: "no"
    - section: "ifupdown"
      option: "managed"
      value: "true"
    - section: "main"
      option: "plugins"
      value: "ifupdown,keyfile"
    - section: "connection"
      option: "wifi.powersave"
      value: 2

- name: Linux Patching | Network | Disable IPv6 via sysctl
  ansible.posix.sysctl:
    sysctl_file: /etc/sysctl.d/70-disable-ipv6.conf
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: true
  register: rv_linux_patching_tmp_ipvsix_disable_sysctl
  failed_when: >
    rv_linux_patching_tmp_ipvsix_disable_sysctl.failed
    and
    rv_linux_patching_tmp_ipvsix_disable_sysctl.msg is not search('disable_ipv6: No such file or directory')
  with_items:
    - name: net.ipv6.conf.all.disable_ipv6
      value: "1"
    - name: net.ipv6.conf.default.disable_ipv6
      value: "1"
    - name: net.ipv6.conf.lo.disable_ipv6
      value: "1"

- name: Linux Patching | Network | Create modprobe directory
  ansible.builtin.file:
    path: /etc/modprobe.d
    state: directory
    owner: root
    group: root
    mode: "0644"

- name: Linux Patching | Network | Disable IPv6 via modeprobe
  ansible.builtin.lineinfile:
    path: /etc/modprobe.d/70-disable-ipv6.conf
    line: "options ipv6 disable=1"
    owner: root
    group: root
    create: true
    mode: "0644"

- name: Linux Patching | Network | Disable ufw IPv6
  ansible.builtin.lineinfile:
    path: /etc/default/ufw
    regexp: "^IPV6="
    line: "IPV6=no"
    state: present


- name: Linux Patching | Network | Setup Host Network Information | Set Host-Name
  ansible.builtin.hostname:
    name: "{{ rv_linux_patching_hostname }}"
    use: debian
  register: rv_linux_patching_tmp_set_debian_hostname
  failed_when: >
    rv_linux_patching_init_system_systemd
    and
    rv_linux_patching_tmp_set_debian_hostname.failed

- name: Linux Patching | Network | Setup Host Network Information | Set Hosts file
  ansible.builtin.lineinfile:
    path: /etc/hosts
    owner: root
    group: root
    mode: "0644"
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
  register: rv_linux_patching_tmp_set_hosts_file_entry
  failed_when: >
    rv_linux_patching_init_system_systemd
    and
    rv_linux_patching_tmp_set_hosts_file_entry.failed
  loop:
    - regexp: '^127\.0\.0\.1'
      line: "127.0.0.1  localhost"
    - regexp: '^127\.0\.1\.1'
      line: "127.0.1.1  {{ rv_linux_patching_hostname }}"

- name: Linux Patching | Network | Setup Host Network Information | Enable network services
  ansible.builtin.service:
    name: "{{ item }}"
    enabled: true
  with_items: "{{ rv_linux_patching_net_time_services }}"
